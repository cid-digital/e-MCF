# coding: utf-8

"""
    e-MCF

    DGI Bénin - Tous droits réservés  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EmcfInfoDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'nim': 'str',
        'status': 'str',
        'shop_name': 'str',
        'address1': 'str',
        'address2': 'str',
        'address3': 'str',
        'contact1': 'str',
        'contact2': 'str',
        'contact3': 'str'
    }

    attribute_map = {
        'nim': 'nim',
        'status': 'status',
        'shop_name': 'shopName',
        'address1': 'address1',
        'address2': 'address2',
        'address3': 'address3',
        'contact1': 'contact1',
        'contact2': 'contact2',
        'contact3': 'contact3'
    }

    def __init__(self, nim=None, status=None, shop_name=None, address1=None, address2=None, address3=None, contact1=None, contact2=None, contact3=None):  # noqa: E501
        """EmcfInfoDto - a model defined in Swagger"""  # noqa: E501
        self._nim = None
        self._status = None
        self._shop_name = None
        self._address1 = None
        self._address2 = None
        self._address3 = None
        self._contact1 = None
        self._contact2 = None
        self._contact3 = None
        self.discriminator = None
        if nim is not None:
            self.nim = nim
        if status is not None:
            self.status = status
        if shop_name is not None:
            self.shop_name = shop_name
        if address1 is not None:
            self.address1 = address1
        if address2 is not None:
            self.address2 = address2
        if address3 is not None:
            self.address3 = address3
        if contact1 is not None:
            self.contact1 = contact1
        if contact2 is not None:
            self.contact2 = contact2
        if contact3 is not None:
            self.contact3 = contact3

    @property
    def nim(self):
        """Gets the nim of this EmcfInfoDto.  # noqa: E501


        :return: The nim of this EmcfInfoDto.  # noqa: E501
        :rtype: str
        """
        return self._nim

    @nim.setter
    def nim(self, nim):
        """Sets the nim of this EmcfInfoDto.


        :param nim: The nim of this EmcfInfoDto.  # noqa: E501
        :type: str
        """

        self._nim = nim

    @property
    def status(self):
        """Gets the status of this EmcfInfoDto.  # noqa: E501


        :return: The status of this EmcfInfoDto.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this EmcfInfoDto.


        :param status: The status of this EmcfInfoDto.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def shop_name(self):
        """Gets the shop_name of this EmcfInfoDto.  # noqa: E501


        :return: The shop_name of this EmcfInfoDto.  # noqa: E501
        :rtype: str
        """
        return self._shop_name

    @shop_name.setter
    def shop_name(self, shop_name):
        """Sets the shop_name of this EmcfInfoDto.


        :param shop_name: The shop_name of this EmcfInfoDto.  # noqa: E501
        :type: str
        """

        self._shop_name = shop_name

    @property
    def address1(self):
        """Gets the address1 of this EmcfInfoDto.  # noqa: E501


        :return: The address1 of this EmcfInfoDto.  # noqa: E501
        :rtype: str
        """
        return self._address1

    @address1.setter
    def address1(self, address1):
        """Sets the address1 of this EmcfInfoDto.


        :param address1: The address1 of this EmcfInfoDto.  # noqa: E501
        :type: str
        """

        self._address1 = address1

    @property
    def address2(self):
        """Gets the address2 of this EmcfInfoDto.  # noqa: E501


        :return: The address2 of this EmcfInfoDto.  # noqa: E501
        :rtype: str
        """
        return self._address2

    @address2.setter
    def address2(self, address2):
        """Sets the address2 of this EmcfInfoDto.


        :param address2: The address2 of this EmcfInfoDto.  # noqa: E501
        :type: str
        """

        self._address2 = address2

    @property
    def address3(self):
        """Gets the address3 of this EmcfInfoDto.  # noqa: E501


        :return: The address3 of this EmcfInfoDto.  # noqa: E501
        :rtype: str
        """
        return self._address3

    @address3.setter
    def address3(self, address3):
        """Sets the address3 of this EmcfInfoDto.


        :param address3: The address3 of this EmcfInfoDto.  # noqa: E501
        :type: str
        """

        self._address3 = address3

    @property
    def contact1(self):
        """Gets the contact1 of this EmcfInfoDto.  # noqa: E501


        :return: The contact1 of this EmcfInfoDto.  # noqa: E501
        :rtype: str
        """
        return self._contact1

    @contact1.setter
    def contact1(self, contact1):
        """Sets the contact1 of this EmcfInfoDto.


        :param contact1: The contact1 of this EmcfInfoDto.  # noqa: E501
        :type: str
        """

        self._contact1 = contact1

    @property
    def contact2(self):
        """Gets the contact2 of this EmcfInfoDto.  # noqa: E501


        :return: The contact2 of this EmcfInfoDto.  # noqa: E501
        :rtype: str
        """
        return self._contact2

    @contact2.setter
    def contact2(self, contact2):
        """Sets the contact2 of this EmcfInfoDto.


        :param contact2: The contact2 of this EmcfInfoDto.  # noqa: E501
        :type: str
        """

        self._contact2 = contact2

    @property
    def contact3(self):
        """Gets the contact3 of this EmcfInfoDto.  # noqa: E501


        :return: The contact3 of this EmcfInfoDto.  # noqa: E501
        :rtype: str
        """
        return self._contact3

    @contact3.setter
    def contact3(self, contact3):
        """Sets the contact3 of this EmcfInfoDto.


        :param contact3: The contact3 of this EmcfInfoDto.  # noqa: E501
        :type: str
        """

        self._contact3 = contact3

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EmcfInfoDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EmcfInfoDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
