# coding: utf-8

"""
    e-MCF

    DGI Bénin - Tous droits réservés  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SecurityElementsDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'date_time': 'str',
        'qr_code': 'str',
        'code_me_ce_fdgi': 'str',
        'counters': 'str',
        'nim': 'str',
        'error_code': 'str',
        'error_desc': 'str'
    }

    attribute_map = {
        'date_time': 'dateTime',
        'qr_code': 'qrCode',
        'code_me_ce_fdgi': 'codeMECeFDGI',
        'counters': 'counters',
        'nim': 'nim',
        'error_code': 'errorCode',
        'error_desc': 'errorDesc'
    }

    def __init__(self, date_time=None, qr_code=None, code_me_ce_fdgi=None, counters=None, nim=None, error_code=None, error_desc=None):  # noqa: E501
        """SecurityElementsDto - a model defined in Swagger"""  # noqa: E501
        self._date_time = None
        self._qr_code = None
        self._code_me_ce_fdgi = None
        self._counters = None
        self._nim = None
        self._error_code = None
        self._error_desc = None
        self.discriminator = None
        if date_time is not None:
            self.date_time = date_time
        if qr_code is not None:
            self.qr_code = qr_code
        if code_me_ce_fdgi is not None:
            self.code_me_ce_fdgi = code_me_ce_fdgi
        if counters is not None:
            self.counters = counters
        if nim is not None:
            self.nim = nim
        if error_code is not None:
            self.error_code = error_code
        if error_desc is not None:
            self.error_desc = error_desc

    @property
    def date_time(self):
        """Gets the date_time of this SecurityElementsDto.  # noqa: E501


        :return: The date_time of this SecurityElementsDto.  # noqa: E501
        :rtype: str
        """
        return self._date_time

    @date_time.setter
    def date_time(self, date_time):
        """Sets the date_time of this SecurityElementsDto.


        :param date_time: The date_time of this SecurityElementsDto.  # noqa: E501
        :type: str
        """

        self._date_time = date_time

    @property
    def qr_code(self):
        """Gets the qr_code of this SecurityElementsDto.  # noqa: E501


        :return: The qr_code of this SecurityElementsDto.  # noqa: E501
        :rtype: str
        """
        return self._qr_code

    @qr_code.setter
    def qr_code(self, qr_code):
        """Sets the qr_code of this SecurityElementsDto.


        :param qr_code: The qr_code of this SecurityElementsDto.  # noqa: E501
        :type: str
        """

        self._qr_code = qr_code

    @property
    def code_me_ce_fdgi(self):
        """Gets the code_me_ce_fdgi of this SecurityElementsDto.  # noqa: E501


        :return: The code_me_ce_fdgi of this SecurityElementsDto.  # noqa: E501
        :rtype: str
        """
        return self._code_me_ce_fdgi

    @code_me_ce_fdgi.setter
    def code_me_ce_fdgi(self, code_me_ce_fdgi):
        """Sets the code_me_ce_fdgi of this SecurityElementsDto.


        :param code_me_ce_fdgi: The code_me_ce_fdgi of this SecurityElementsDto.  # noqa: E501
        :type: str
        """

        self._code_me_ce_fdgi = code_me_ce_fdgi

    @property
    def counters(self):
        """Gets the counters of this SecurityElementsDto.  # noqa: E501


        :return: The counters of this SecurityElementsDto.  # noqa: E501
        :rtype: str
        """
        return self._counters

    @counters.setter
    def counters(self, counters):
        """Sets the counters of this SecurityElementsDto.


        :param counters: The counters of this SecurityElementsDto.  # noqa: E501
        :type: str
        """

        self._counters = counters

    @property
    def nim(self):
        """Gets the nim of this SecurityElementsDto.  # noqa: E501


        :return: The nim of this SecurityElementsDto.  # noqa: E501
        :rtype: str
        """
        return self._nim

    @nim.setter
    def nim(self, nim):
        """Sets the nim of this SecurityElementsDto.


        :param nim: The nim of this SecurityElementsDto.  # noqa: E501
        :type: str
        """

        self._nim = nim

    @property
    def error_code(self):
        """Gets the error_code of this SecurityElementsDto.  # noqa: E501


        :return: The error_code of this SecurityElementsDto.  # noqa: E501
        :rtype: str
        """
        return self._error_code

    @error_code.setter
    def error_code(self, error_code):
        """Sets the error_code of this SecurityElementsDto.


        :param error_code: The error_code of this SecurityElementsDto.  # noqa: E501
        :type: str
        """

        self._error_code = error_code

    @property
    def error_desc(self):
        """Gets the error_desc of this SecurityElementsDto.  # noqa: E501


        :return: The error_desc of this SecurityElementsDto.  # noqa: E501
        :rtype: str
        """
        return self._error_desc

    @error_desc.setter
    def error_desc(self, error_desc):
        """Sets the error_desc of this SecurityElementsDto.


        :param error_desc: The error_desc of this SecurityElementsDto.  # noqa: E501
        :type: str
        """

        self._error_desc = error_desc

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SecurityElementsDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SecurityElementsDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
