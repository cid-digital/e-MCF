# coding: utf-8

"""
    e-MCF

    DGI Bénin - Tous droits réservés  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ItemDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'code': 'str',
        'name': 'str',
        'price': 'int',
        'quantity': 'float',
        'tax_group': 'TaxGroupTypeEnum',
        'tax_specific': 'int',
        'original_price': 'float',
        'price_modification': 'str'
    }

    attribute_map = {
        'code': 'code',
        'name': 'name',
        'price': 'price',
        'quantity': 'quantity',
        'tax_group': 'taxGroup',
        'tax_specific': 'taxSpecific',
        'original_price': 'originalPrice',
        'price_modification': 'priceModification'
    }

    def __init__(self, code=None, name=None, price=None, quantity=None, tax_group=None, tax_specific=None, original_price=None, price_modification=None):  # noqa: E501
        """ItemDto - a model defined in Swagger"""  # noqa: E501
        self._code = None
        self._name = None
        self._price = None
        self._quantity = None
        self._tax_group = None
        self._tax_specific = None
        self._original_price = None
        self._price_modification = None
        self.discriminator = None
        if code is not None:
            self.code = code
        if name is not None:
            self.name = name
        if price is not None:
            self.price = price
        if quantity is not None:
            self.quantity = quantity
        if tax_group is not None:
            self.tax_group = tax_group
        if tax_specific is not None:
            self.tax_specific = tax_specific
        if original_price is not None:
            self.original_price = original_price
        if price_modification is not None:
            self.price_modification = price_modification

    @property
    def code(self):
        """Gets the code of this ItemDto.  # noqa: E501


        :return: The code of this ItemDto.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this ItemDto.


        :param code: The code of this ItemDto.  # noqa: E501
        :type: str
        """

        self._code = code

    @property
    def name(self):
        """Gets the name of this ItemDto.  # noqa: E501


        :return: The name of this ItemDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ItemDto.


        :param name: The name of this ItemDto.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def price(self):
        """Gets the price of this ItemDto.  # noqa: E501


        :return: The price of this ItemDto.  # noqa: E501
        :rtype: int
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this ItemDto.


        :param price: The price of this ItemDto.  # noqa: E501
        :type: int
        """

        self._price = price

    @property
    def quantity(self):
        """Gets the quantity of this ItemDto.  # noqa: E501


        :return: The quantity of this ItemDto.  # noqa: E501
        :rtype: float
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this ItemDto.


        :param quantity: The quantity of this ItemDto.  # noqa: E501
        :type: float
        """

        self._quantity = quantity

    @property
    def tax_group(self):
        """Gets the tax_group of this ItemDto.  # noqa: E501


        :return: The tax_group of this ItemDto.  # noqa: E501
        :rtype: TaxGroupTypeEnum
        """
        return self._tax_group

    @tax_group.setter
    def tax_group(self, tax_group):
        """Sets the tax_group of this ItemDto.


        :param tax_group: The tax_group of this ItemDto.  # noqa: E501
        :type: TaxGroupTypeEnum
        """

        self._tax_group = tax_group

    @property
    def tax_specific(self):
        """Gets the tax_specific of this ItemDto.  # noqa: E501


        :return: The tax_specific of this ItemDto.  # noqa: E501
        :rtype: int
        """
        return self._tax_specific

    @tax_specific.setter
    def tax_specific(self, tax_specific):
        """Sets the tax_specific of this ItemDto.


        :param tax_specific: The tax_specific of this ItemDto.  # noqa: E501
        :type: int
        """

        self._tax_specific = tax_specific

    @property
    def original_price(self):
        """Gets the original_price of this ItemDto.  # noqa: E501


        :return: The original_price of this ItemDto.  # noqa: E501
        :rtype: float
        """
        return self._original_price

    @original_price.setter
    def original_price(self, original_price):
        """Sets the original_price of this ItemDto.


        :param original_price: The original_price of this ItemDto.  # noqa: E501
        :type: float
        """

        self._original_price = original_price

    @property
    def price_modification(self):
        """Gets the price_modification of this ItemDto.  # noqa: E501


        :return: The price_modification of this ItemDto.  # noqa: E501
        :rtype: str
        """
        return self._price_modification

    @price_modification.setter
    def price_modification(self, price_modification):
        """Sets the price_modification of this ItemDto.


        :param price_modification: The price_modification of this ItemDto.  # noqa: E501
        :type: str
        """

        self._price_modification = price_modification

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ItemDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ItemDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
