# coding: utf-8

"""
    e-MCF

    DGI Bénin - Tous droits réservés  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InvoiceRequestDataDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ifu': 'str',
        'aib': 'AibGroupTypeEnum',
        'type': 'InvoiceTypeEnum',
        'items': 'list[ItemDto]',
        'client': 'ClientDto',
        'operator': 'OperatorDto',
        'payment': 'list[PaymentDto]',
        'reference': 'str'
    }

    attribute_map = {
        'ifu': 'ifu',
        'aib': 'aib',
        'type': 'type',
        'items': 'items',
        'client': 'client',
        'operator': 'operator',
        'payment': 'payment',
        'reference': 'reference'
    }

    def __init__(self, ifu=None, aib=None, type=None, items=None, client=None, operator=None, payment=None, reference=None):  # noqa: E501
        """InvoiceRequestDataDto - a model defined in Swagger"""  # noqa: E501
        self._ifu = None
        self._aib = None
        self._type = None
        self._items = None
        self._client = None
        self._operator = None
        self._payment = None
        self._reference = None
        self.discriminator = None
        if ifu is not None:
            self.ifu = ifu
        if aib is not None:
            self.aib = aib
        if type is not None:
            self.type = type
        if items is not None:
            self.items = items
        if client is not None:
            self.client = client
        if operator is not None:
            self.operator = operator
        if payment is not None:
            self.payment = payment
        if reference is not None:
            self.reference = reference

    @property
    def ifu(self):
        """Gets the ifu of this InvoiceRequestDataDto.  # noqa: E501


        :return: The ifu of this InvoiceRequestDataDto.  # noqa: E501
        :rtype: str
        """
        return self._ifu

    @ifu.setter
    def ifu(self, ifu):
        """Sets the ifu of this InvoiceRequestDataDto.


        :param ifu: The ifu of this InvoiceRequestDataDto.  # noqa: E501
        :type: str
        """

        self._ifu = ifu

    @property
    def aib(self):
        """Gets the aib of this InvoiceRequestDataDto.  # noqa: E501


        :return: The aib of this InvoiceRequestDataDto.  # noqa: E501
        :rtype: AibGroupTypeEnum
        """
        return self._aib

    @aib.setter
    def aib(self, aib):
        """Sets the aib of this InvoiceRequestDataDto.


        :param aib: The aib of this InvoiceRequestDataDto.  # noqa: E501
        :type: AibGroupTypeEnum
        """

        self._aib = aib

    @property
    def type(self):
        """Gets the type of this InvoiceRequestDataDto.  # noqa: E501


        :return: The type of this InvoiceRequestDataDto.  # noqa: E501
        :rtype: InvoiceTypeEnum
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this InvoiceRequestDataDto.


        :param type: The type of this InvoiceRequestDataDto.  # noqa: E501
        :type: InvoiceTypeEnum
        """

        self._type = type

    @property
    def items(self):
        """Gets the items of this InvoiceRequestDataDto.  # noqa: E501


        :return: The items of this InvoiceRequestDataDto.  # noqa: E501
        :rtype: list[ItemDto]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this InvoiceRequestDataDto.


        :param items: The items of this InvoiceRequestDataDto.  # noqa: E501
        :type: list[ItemDto]
        """

        self._items = items

    @property
    def client(self):
        """Gets the client of this InvoiceRequestDataDto.  # noqa: E501


        :return: The client of this InvoiceRequestDataDto.  # noqa: E501
        :rtype: ClientDto
        """
        return self._client

    @client.setter
    def client(self, client):
        """Sets the client of this InvoiceRequestDataDto.


        :param client: The client of this InvoiceRequestDataDto.  # noqa: E501
        :type: ClientDto
        """

        self._client = client

    @property
    def operator(self):
        """Gets the operator of this InvoiceRequestDataDto.  # noqa: E501


        :return: The operator of this InvoiceRequestDataDto.  # noqa: E501
        :rtype: OperatorDto
        """
        return self._operator

    @operator.setter
    def operator(self, operator):
        """Sets the operator of this InvoiceRequestDataDto.


        :param operator: The operator of this InvoiceRequestDataDto.  # noqa: E501
        :type: OperatorDto
        """

        self._operator = operator

    @property
    def payment(self):
        """Gets the payment of this InvoiceRequestDataDto.  # noqa: E501


        :return: The payment of this InvoiceRequestDataDto.  # noqa: E501
        :rtype: list[PaymentDto]
        """
        return self._payment

    @payment.setter
    def payment(self, payment):
        """Sets the payment of this InvoiceRequestDataDto.


        :param payment: The payment of this InvoiceRequestDataDto.  # noqa: E501
        :type: list[PaymentDto]
        """

        self._payment = payment

    @property
    def reference(self):
        """Gets the reference of this InvoiceRequestDataDto.  # noqa: E501


        :return: The reference of this InvoiceRequestDataDto.  # noqa: E501
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this InvoiceRequestDataDto.


        :param reference: The reference of this InvoiceRequestDataDto.  # noqa: E501
        :type: str
        """

        self._reference = reference

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InvoiceRequestDataDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InvoiceRequestDataDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
