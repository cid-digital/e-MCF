# coding: utf-8

"""
    e-MCF

    DGI Bénin - Tous droits réservés  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InfoResponseDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'status': 'bool',
        'version': 'str',
        'ifu': 'str',
        'nim': 'str',
        'token_valid': 'datetime',
        'server_date_time': 'datetime',
        'emcf_list': 'list[EmcfInfoDto]'
    }

    attribute_map = {
        'status': 'status',
        'version': 'version',
        'ifu': 'ifu',
        'nim': 'nim',
        'token_valid': 'tokenValid',
        'server_date_time': 'serverDateTime',
        'emcf_list': 'emcfList'
    }

    def __init__(self, status=None, version=None, ifu=None, nim=None, token_valid=None, server_date_time=None, emcf_list=None):  # noqa: E501
        """InfoResponseDto - a model defined in Swagger"""  # noqa: E501
        self._status = None
        self._version = None
        self._ifu = None
        self._nim = None
        self._token_valid = None
        self._server_date_time = None
        self._emcf_list = None
        self.discriminator = None
        if status is not None:
            self.status = status
        if version is not None:
            self.version = version
        if ifu is not None:
            self.ifu = ifu
        if nim is not None:
            self.nim = nim
        if token_valid is not None:
            self.token_valid = token_valid
        if server_date_time is not None:
            self.server_date_time = server_date_time
        if emcf_list is not None:
            self.emcf_list = emcf_list

    @property
    def status(self):
        """Gets the status of this InfoResponseDto.  # noqa: E501


        :return: The status of this InfoResponseDto.  # noqa: E501
        :rtype: bool
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this InfoResponseDto.


        :param status: The status of this InfoResponseDto.  # noqa: E501
        :type: bool
        """

        self._status = status

    @property
    def version(self):
        """Gets the version of this InfoResponseDto.  # noqa: E501


        :return: The version of this InfoResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this InfoResponseDto.


        :param version: The version of this InfoResponseDto.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def ifu(self):
        """Gets the ifu of this InfoResponseDto.  # noqa: E501


        :return: The ifu of this InfoResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._ifu

    @ifu.setter
    def ifu(self, ifu):
        """Sets the ifu of this InfoResponseDto.


        :param ifu: The ifu of this InfoResponseDto.  # noqa: E501
        :type: str
        """

        self._ifu = ifu

    @property
    def nim(self):
        """Gets the nim of this InfoResponseDto.  # noqa: E501


        :return: The nim of this InfoResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._nim

    @nim.setter
    def nim(self, nim):
        """Sets the nim of this InfoResponseDto.


        :param nim: The nim of this InfoResponseDto.  # noqa: E501
        :type: str
        """

        self._nim = nim

    @property
    def token_valid(self):
        """Gets the token_valid of this InfoResponseDto.  # noqa: E501


        :return: The token_valid of this InfoResponseDto.  # noqa: E501
        :rtype: datetime
        """
        return self._token_valid

    @token_valid.setter
    def token_valid(self, token_valid):
        """Sets the token_valid of this InfoResponseDto.


        :param token_valid: The token_valid of this InfoResponseDto.  # noqa: E501
        :type: datetime
        """

        self._token_valid = token_valid

    @property
    def server_date_time(self):
        """Gets the server_date_time of this InfoResponseDto.  # noqa: E501


        :return: The server_date_time of this InfoResponseDto.  # noqa: E501
        :rtype: datetime
        """
        return self._server_date_time

    @server_date_time.setter
    def server_date_time(self, server_date_time):
        """Sets the server_date_time of this InfoResponseDto.


        :param server_date_time: The server_date_time of this InfoResponseDto.  # noqa: E501
        :type: datetime
        """

        self._server_date_time = server_date_time

    @property
    def emcf_list(self):
        """Gets the emcf_list of this InfoResponseDto.  # noqa: E501


        :return: The emcf_list of this InfoResponseDto.  # noqa: E501
        :rtype: list[EmcfInfoDto]
        """
        return self._emcf_list

    @emcf_list.setter
    def emcf_list(self, emcf_list):
        """Sets the emcf_list of this InfoResponseDto.


        :param emcf_list: The emcf_list of this InfoResponseDto.  # noqa: E501
        :type: list[EmcfInfoDto]
        """

        self._emcf_list = emcf_list

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InfoResponseDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InfoResponseDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
